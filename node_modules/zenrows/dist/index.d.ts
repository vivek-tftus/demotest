import * as fetch_retry from 'fetch-retry';
import fastq from 'fastq';

type HttpMethods = "GET" | "POST" | "PUT";
interface ClientConfig {
    concurrency?: number;
    retries?: number;
}
interface ZenRowsConfig {
    autoparse?: boolean;
    css_extractor?: string;
    js_render?: boolean;
    premium_proxy?: boolean;
    proxy_country?: string;
    wait_for?: string;
    wait?: number;
    block_resources?: string;
    window_width?: number;
    window_height?: number;
    device?: string;
    original_status?: boolean;
    custom_headers?: boolean;
    [x: string]: unknown;
}
interface Headers {
    [x: string]: string;
}
declare class ZenRows {
    readonly apiKey: string;
    readonly clientConfig: ClientConfig;
    readonly queue: fastq.queueAsPromised<{
        url: string;
        method?: HttpMethods | undefined;
        config?: ZenRowsConfig | undefined;
        headers: Headers;
        data?: unknown;
    }, Response>;
    readonly fetchWithRetry: (input: string | URL | Request, init?: (RequestInit & fetch_retry.RequestInitRetryParams<typeof fetch>) | undefined) => Promise<Response>;
    constructor(apiKey: string, clientConfig?: ClientConfig);
    get(url: string, config?: ZenRowsConfig, { headers }?: {
        headers?: Headers;
    }): Promise<Response>;
    post(url: string, config?: ZenRowsConfig, { headers, data }?: {
        headers?: Headers;
        data?: unknown;
    }): Promise<Response>;
    private worker;
}

export { ZenRows, type ZenRowsConfig };
