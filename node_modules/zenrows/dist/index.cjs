"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ZenRows: () => ZenRows
});
module.exports = __toCommonJS(src_exports);
var import_fastq = __toESM(require("fastq"), 1);
var import_fetch_retry = __toESM(require("fetch-retry"), 1);

// package.json
var package_default = {
  name: "zenrows",
  version: "1.3.2",
  description: "ZenRows Node SDK",
  main: "./dist/index.cjs",
  module: "./dist/index.js",
  types: "./dist/index.d.ts",
  engines: {
    node: ">=20"
  },
  packageManager: "pnpm@9.4.0",
  exports: {
    ".": {
      require: "./dist/index.cjs",
      import: "./dist/index.js",
      types: "./dist/index.d.ts"
    }
  },
  scripts: {
    build: "tsup src/index.ts --dts --format cjs,esm --clean",
    test: "vitest"
  },
  keywords: ["sdk", "zenrows", "scraping"],
  author: "ZenRows",
  repository: {
    type: "git",
    url: "https://github.com/ZenRows/zenrows-node-sdk.git"
  },
  homepage: "https://github.com/ZenRows/zenrows-node-sdk#readme",
  url: "https://github.com/ZenRows/zenrows-node-sdk/issues",
  type: "module",
  license: "MIT",
  devDependencies: {
    "@biomejs/biome": "1.8.1",
    "@types/async-retry": "^1.4.8",
    "@types/node": "^20.14.2",
    msw: "^2.3.1",
    tsup: "^8.1.0",
    typescript: "^5.4.5",
    vitest: "^1.6.0"
  },
  dependencies: {
    fastq: "^1.17.1",
    "fetch-retry": "^6.0.0"
  }
};

// src/index.ts
var API_URL = "https://api.zenrows.com/v1/";
var ZenRows = class {
  apiKey;
  clientConfig;
  queue;
  fetchWithRetry;
  constructor(apiKey, clientConfig = {}) {
    this.apiKey = apiKey;
    this.clientConfig = clientConfig;
    const retries = this.clientConfig.retries ?? 0;
    this.queue = import_fastq.default.promise(
      this,
      this.worker,
      this.clientConfig.concurrency ?? 5
    );
    this.fetchWithRetry = (0, import_fetch_retry.default)(fetch, {
      retryDelay: (attempt) => 2 ** attempt * 1e3,
      // retryOn: [422, 503, 504],
      retryOn: (attempt, error, response) => {
        if (attempt > retries) {
          return false;
        }
        if (error !== null || response?.status === 422 || response?.status === 503 || response?.status === 504) {
          return true;
        }
        return false;
      }
    });
  }
  get(url, config, { headers = {} } = {}) {
    return this.queue.push({ url, config, headers });
  }
  post(url, config, { headers = {}, data = {} } = {
    headers: { "Content-Type": "application/x-www-form-urlencoded" }
  }) {
    return this.queue.push({
      url,
      method: "POST",
      config,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...headers
      },
      data
    });
  }
  async worker({
    url,
    method = "GET",
    config,
    headers,
    data
  }) {
    const params = new URLSearchParams({
      url,
      apikey: this.apiKey
    });
    if (config) {
      for (const [key, value] of Object.entries(config)) {
        if (value !== void 0) {
          params.append(key, String(value));
        }
      }
    }
    if (headers && Object.keys(headers).length) {
      params.append("custom_headers", "true");
    }
    const finalHeaders = {
      "User-Agent": `zenrows/${package_default.version} node`,
      ...headers
    };
    const fetchOptions = {
      method,
      headers: finalHeaders
    };
    if (method === "POST" && data) {
      if (typeof data === "object") {
        fetchOptions.body = JSON.stringify(data);
      } else {
        fetchOptions.body = String(data);
      }
    }
    const response = await this.fetchWithRetry(
      `${API_URL}?${params.toString()}`,
      fetchOptions
    );
    return response;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ZenRows
});
